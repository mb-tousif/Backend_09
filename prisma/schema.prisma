// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  Pending
  Confirmed
  Delivered
  Cancelled
}

enum Role {
  Super_admin
  Admin
  User
}

enum Category {
  Furniture_paint
  Home_paint
  Office_paint
  Shop_paint
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String
  password  String
  role      Role   @default(User) 
  imgUrl    String  @default("https://img.freepik.com/free-psd/3d-illustration-bald-person-with-glasses_23-2149436184.jpg")
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  reviews   Review[]
  bookings  Booking[]
  feedbacks Feedback[]
  notifications Notification[]
  blogs     Blogs[]

  @@map("users")
}

model Service {
  id        String     @id @default(uuid())
  name      String
  price     Int
  category  Category
  description String
  shedule   String
  imgUrl    String  @default("https://img.freepik.com/free-vector/household-renovation-professions_23-2148676135.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  bookings  Booking[]
  shedules  Shedule[]
  reviews   Review[]

  @@map("services")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  serviceId String
  quantity  Int
  totalPrice     Int
  users      User       @relation(fields: [userId], references: [id])
  services   Service    @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Review {
  id        String     @id @default(uuid())
  userId    String
  serviceId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User       @relation(fields: [userId], references: [id])
  services   Service    @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model Booking {
  id        String     @id @default(uuid())
  userId    String
  serviceId String
  status    BookingStatus @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shedules  Shedule[]
  services   Service    @relation(fields: [serviceId], references: [id])
  users      User       @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Shedule {
  id        String     @id @default(uuid())
  bookingId    String
  serviceId String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings   Booking    @relation(fields: [bookingId], references: [id])
  services   Service    @relation(fields: [serviceId], references: [id])
  @@map("shedules")
}

model Feedback {
  id        String     @id @default(uuid())
  userId    String
  serviceId String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User       @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Notification {
  id        String     @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User       @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Blogs {
  id        String     @id @default(uuid())
  userId    String
  title     String
  content   String
  imgUrl    String    @default("https://img.freepik.com/free-photo/wall-painting-with-roller-concept_23-2148903464.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User       @relation(fields: [userId], references: [id])

  @@map("blogs")
}