// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  password  String
  role      String   @default("User")
  status    String   @default("Active")
  imgUrl    String   @default("https://img.freepik.com/free-psd/3d-illustration-bald-person-with-glasses_23-2149436184.jpg")
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts         Cart[]
  reviews       Review[]
  bookings      Booking[]
  feedbacks     Feedback[]
  notifications Notification[]
  blogs         Blogs[]
  payments      Payment[]

  @@map("users")
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  price       Int
  category    String
  description String
  schedule    String
  imgUrl      String   @default("https://img.freepik.com/free-vector/household-renovation-professions_23-2148676135.jpg")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carts     Cart[]
  bookings  Booking[]
  schedules Schedule[]
  reviews   Review[]

  @@map("services")
}

model Cart {
  id         String  @id @default(uuid())
  userId     String
  serviceId  String
  quantity   Int
  totalPrice Int
  users      User    @relation(fields: [userId], references: [id])
  services   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  status    String   @default("Pending")
  paymentStatus   String   @default("Pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services      Service        @relation(fields: [serviceId], references: [id])
  users         User           @relation(fields: [userId], references: [id])
  schedules     Schedule[]
  notifications Notification[]
  payments      Payment[]

  @@map("bookings")
}

model Schedule {
  id        String   @id @default(uuid())
  bookingId String
  serviceId String
  duration  String
  startDate String
  endDate   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking @relation(fields: [bookingId], references: [id])
  services Service @relation(fields: [serviceId], references: [id])

  @@map("shedules")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  rating    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User    @relation(fields: [userId], references: [id])
  services Service @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  bookingId String
  paymentId String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User    @relation(fields: [userId], references: [id])
  bookings Booking @relation(fields: [bookingId], references: [id])
  payments Payment @relation(fields: [paymentId], references: [id])

  @@map("notifications")
}

model Blogs {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  imgUrl    String   @default("https://img.freepik.com/free-photo/wall-painting-with-roller-concept_23-2148903464.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User @relation(fields: [userId], references: [id])

  @@map("blogs")
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  bookingId String
  serviceId String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]

  users    User    @relation(fields: [userId], references: [id])
  bookings Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}